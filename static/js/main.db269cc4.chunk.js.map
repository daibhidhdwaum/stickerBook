{"version":3,"sources":["Sticker.js","App.js","serviceWorker.js","index.js"],"names":["Sticker","props","className","key","id","onClick","handleClick","stickernumber","stickerNumber","src","image","alt","name","species","status","planet","App","event","target","classList","add","sticker","childNodes","remove","targetID","copyOfStickerClicked","state","stickerClicked","push","visible","console","log","setState","charactersInfo","axios","url","method","responseType","then","response","data","this","map","character","index","toString","origin","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8SA+BeA,G,MA7BC,SAACC,GACf,OACE,yBAAKC,UAAU,wBAAwBC,IAAKF,EAAMG,IAChD,4BACEF,UAAU,iBACVG,QAASJ,EAAMK,YACfF,GAAIH,EAAMG,GAAIG,cAAeN,EAAMO,eACnCP,EAAMO,cACN,yBACEN,UAAU,iBACVO,IAAKR,EAAMS,MACXC,IAAKV,EAAMW,KACXP,QAASJ,EAAMK,YACfF,GAAIH,EAAMG,MAGd,6BACE,qCAAWH,EAAMW,MACjB,uCAAaX,EAAMY,SACnB,sCAAYZ,EAAMa,QAClB,sCAAYb,EAAMc,YCwEXC,E,kDAxFb,aAAe,IAAD,8BACZ,gBAuBFV,YAAc,SAACW,GAKMA,EAAMC,OAAOC,UACrBC,IAAI,cAGf,IAAMC,EAAUJ,EAAMC,OAAOI,WAAW,GAAGH,UAC3CE,EAAQE,OAAO,UACfF,EAAQD,IAAI,WAEZ,IAAII,EAAWP,EAAMC,OAAOd,GACxBqB,EAAoB,YAAO,EAAKC,MAAMC,gBAE1CF,EAAqBG,KAAK,CACxBC,SAAS,EACTL,aAGFM,QAAQC,IAAIN,GACZ,EAAKO,SAAS,CACZL,eAAgBF,KA7ClB,EAAKC,MAAQ,CACXO,eAAgB,GAChBN,eAAgB,IAElBG,QAAQC,IAAI,EAAKL,MAAMC,gBANX,E,gEASO,IAAD,OAClBO,IAAM,CACJC,IACE,wHACFC,OAAQ,MACRC,aAAc,SACbC,MAAK,SAACC,GACPA,EAAWA,EAASC,KAEpB,EAAKR,SAAS,CACZC,eAAgBM,S,+BAkCZ,IAAD,OACP,OACE,oCACE,gCACE,8BAEA,4BACE,0BAAMrC,UAAU,kBAAhB,kBADF,kBAIF,8BACGuC,KAAKf,MAAMO,eAAeS,KAAI,SAACC,EAAWC,GACzC,IAAMzC,EAAMwC,EAAUvC,GAAGyC,WAEzB,OACE,kBAAC,EAAD,CACErC,cAAeoC,EAAQ,EACvBzC,IAAKA,EACLC,GAAID,EACJS,KAAM+B,EAAU/B,KAChBF,MAAOiC,EAAUjC,MACjBG,QAAS8B,EAAU9B,QACnBC,OAAQ6B,EAAU7B,OAClBC,OAAQ4B,EAAUG,OAAOlC,KACzBmC,MAAO,EAAKrB,MAAMC,eAClBrB,YAAa,SAACW,GAAD,OAAW,EAAKX,YAAYW,e,GA/EvC+B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.db269cc4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Sticker = (props) => {\r\n  return (\r\n    <div className=\"flex stickerContainer\" key={props.id}>\r\n      <button\r\n        className=\"imageContainer\"\r\n        onClick={props.handleClick}\r\n        id={props.id} stickernumber={props.stickerNumber} \r\n      >{props.stickerNumber}\r\n        <img\r\n          className=\"sticker hidden\"\r\n          src={props.image}\r\n          alt={props.name}\r\n          onClick={props.handleClick}\r\n          id={props.id}\r\n        />\r\n      </button>\r\n      <div>\r\n        <h2>name: {props.name}</h2>\r\n        <p>species: {props.species}</p>\r\n        <p>status: {props.status}</p>\r\n        <p>Planet: {props.planet}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\n\r\nexport default Sticker;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport Sticker from \"./Sticker\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      charactersInfo: [],\n      stickerClicked: [],\n    };\n    console.log(this.state.stickerClicked)\n  }\n\n  componentDidMount() {\n    axios({\n      url:\n        \"https://rickandmortyapi.com/api/character/[1,2,3,4,5,7,20,47,103,118,162,171,196,242,244,252,259,265,306,329,353,372]\",\n      method: \"GET\",\n      responseType: \"JSON\",\n    }).then((response) => {\n      response = response.data;\n\n      this.setState({\n        charactersInfo: response,\n      });\n    });\n  }\n\n  handleClick = (event) => {\n    \n    // console.log(this.state.stickerClicked)\n\n    // hide sticker number when clicked\n    const stickerNum = event.target.classList;\n    stickerNum.add(\"hideNumber\");\n\n    // display sticker when clicked\n    const sticker = event.target.childNodes[1].classList;\n    sticker.remove(\"hidden\");\n    sticker.add(\"visible\");\n\n    let targetID = event.target.id;\n    let copyOfStickerClicked = [...this.state.stickerClicked];\n\n    copyOfStickerClicked.push({\n      visible: true,\n      targetID,\n    });\n\n    console.log(copyOfStickerClicked)\n    this.setState({\n      stickerClicked: copyOfStickerClicked,\n    });\n\n    \n  };\n\n  render() {\n    return (\n      <>\n        <header>\n          <div></div>\n          {/* div stores background image */}\n          <h1>\n            <span className=\"visuallyHidden\">Rick and Morty</span> Sticker Book\n          </h1>\n        </header>\n        <main>\n          {this.state.charactersInfo.map((character, index) => {\n            const key = character.id.toString();\n\n            return (\n              <Sticker\n                stickerNumber={index + 1}\n                key={key}\n                id={key}\n                name={character.name}\n                image={character.image}\n                species={character.species}\n                status={character.status}\n                planet={character.origin.name}\n                value={this.state.stickerClicked}\n                handleClick={(event) => this.handleClick(event)}\n              />\n            );\n          })}\n        </main>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}