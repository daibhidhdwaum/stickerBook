{"version":3,"sources":["Header.js","Footer.js","Sticker.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","class","Footer","href","target","Sticker","props","key","id","onClick","handleClick","stickernumber","stickerNumber","value","src","image","alt","name","species","status","planet","App","event","targetID","collected","state","stickerClicked","i","length","sticker","childNodes","classList","remove","add","copyOfStickerClicked","push","setState","charactersInfo","axios","url","method","responseType","then","response","data","catch","error","console","log","this","map","character","index","toString","origin","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yRAsBeA,EApBA,WACb,OACE,gCACE,yBAAKC,UAAU,oBAEf,yBAAKA,UAAU,YACb,yBAAKA,UAAU,SACb,uBAAGC,MAAM,uBAEX,4BACE,0BAAMD,UAAU,kBAAhB,kBADF,iBAGA,yBAAKA,UAAU,SACb,uBAAGC,MAAM,0BCHJC,EAVA,WACb,OACE,gCACE,uBAAGC,KAAK,mCAAmCC,OAAO,UAAlD,sCCmCSC,EAtCC,SAACC,GACf,OACE,yBAAKN,UAAU,mBAAmBO,IAAKD,EAAME,IAC3C,4BACER,UAAU,iBACVS,QAASH,EAAMI,YACfF,GAAIF,EAAME,GACVG,cAAeL,EAAMM,cACrBC,MAAM,UAGN,yBACEb,UAAU,iBACVc,IAAKR,EAAMS,MACXC,IAAKV,EAAMW,KACXR,QAASH,EAAMI,YACfF,GAAIF,EAAME,MAGd,yBAAKR,UAAU,QAEb,wBAAIA,UAAU,iBAAd,SACQ,0BAAMA,UAAU,oBAAoBM,EAAMW,OAElD,uBAAGjB,UAAU,iBAAb,YACW,0BAAMA,UAAU,oBAAoBM,EAAMY,UAErD,uBAAGlB,UAAU,iBAAb,WACU,0BAAMA,UAAU,oBAAoBM,EAAMa,SAEpD,uBAAGnB,UAAU,iBAAb,WACU,0BAAMA,UAAU,oBAAoBM,EAAMc,YCiE7CC,E,kDA3Fb,aAAe,IAAD,8BACZ,gBAwBFX,YAAc,SAACY,GAKb,IAJA,IAAIC,EAAWD,EAAMlB,OAAOI,GACtBgB,EAAY,EAAKC,MAAMC,eAGpBC,EAAI,EAAGA,EAAIH,EAAUI,OAAQD,IACpC,GAAIJ,IAAaC,EAAUG,GAAGnB,GAC5B,OAKJ,IAAMqB,EAAUP,EAAMlB,OAAO0B,WAAW,GAAGC,UACrCvB,EAAKc,EAAMlB,OAAOI,GAExBqB,EAAQG,OAAO,UACfH,EAAQI,IAAI,WAGZ,IAAIC,EAAoB,YAAO,EAAKT,MAAMC,gBAG1CQ,EAAqBC,KAAK,CACxB3B,OAIF,EAAK4B,SAAS,CACZV,eAAgBQ,KAnDlB,EAAKT,MAAQ,CACXY,eAAgB,GAChBX,eAAgB,IAJN,E,gEAQO,IAAD,OAClBY,IAAM,CACJC,IACE,gIACFC,OAAQ,MACRC,aAAc,SACbC,MAAK,SAACC,GACPA,EAAWA,EAASC,KAEpB,EAAKR,SAAS,CACZC,eAAgBM,OAEjBE,OAAM,SAACC,GACRC,QAAQC,IAAIF,Q,+BAoCN,IAAD,OACP,OACE,oCACE,kBAAC,EAAD,MACA,8BACE,yBAAK9C,UAAU,WACb,uEACA,yBAAKA,UAAU,iBACZiD,KAAKxB,MAAMY,eAAea,KAAI,SAACC,EAAWC,GACzC,IAAM7C,EAAM4C,EAAU3C,GAAG6C,WACzB,OACE,kBAAC,EAAD,CACEzC,cAAewC,EAAQ,EACvB7C,IAAKA,EACLC,GAAID,EACJU,KAAMkC,EAAUlC,KAChBF,MAAOoC,EAAUpC,MACjBG,QAASiC,EAAUjC,QACnBC,OAAQgC,EAAUhC,OAClBC,OAAQ+B,EAAUG,OAAOrC,KACzBJ,MAAO,EAAKY,MAAMC,eAClBhB,YAAa,SAACY,GAAD,OAAW,EAAKZ,YAAYY,YAOrD,kBAAC,EAAD,W,GAtFUiC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdzB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMyB,c","file":"static/js/main.b79cf43d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header>\r\n      <div className=\"backgroundImage\"></div>\r\n      {/* div stores background image */}\r\n      <div className=\"entryBar\">\r\n        <div className=\"arrow\">\r\n          <i class=\"fas fa-arrow-down\"></i>\r\n        </div>\r\n        <h1>\r\n          <span className=\"visuallyHidden\">Rick and Morty</span> Sticker Book\r\n        </h1>\r\n        <div className=\"arrow\">\r\n          <i class=\"fas fa-arrow-down\"></i>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <footer>\r\n      <a href=\"https://github.com/daibhidhdwaum\" target=\"_blank\">\r\n        https://github.com/daibhidhdwaum\r\n      </a>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nconst Sticker = (props) => {\r\n  return (\r\n    <div className=\"stickerContainer\" key={props.id}>\r\n      <button\r\n        className=\"imageContainer\"\r\n        onClick={props.handleClick}\r\n        id={props.id}\r\n        stickernumber={props.stickerNumber}\r\n        value=\"button\"\r\n      >\r\n        {/* this is the sticker image */}\r\n        <img\r\n          className=\"sticker hidden\"\r\n          src={props.image}\r\n          alt={props.name}\r\n          onClick={props.handleClick}\r\n          id={props.id}\r\n        />\r\n      </button>\r\n      <div className=\"info\">\r\n        {/* Character details */}\r\n        <h3 className=\"characterInfo\">\r\n          Name: <span className=\"characterDetails\">{props.name}</span>\r\n        </h3>\r\n        <p className=\"characterInfo\">\r\n          Species: <span className=\"characterDetails\">{props.species}</span>\r\n        </p>\r\n        <p className=\"characterInfo\">\r\n          Status: <span className=\"characterDetails\">{props.status}</span>\r\n        </p>\r\n        <p className=\"characterInfo\">\r\n          Planet: <span className=\"characterDetails\">{props.planet}</span>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sticker;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\nimport Sticker from \"./Sticker\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      charactersInfo: [],\n      stickerClicked: [],\n    };\n  }\n\n  componentDidMount() {\n    axios({\n      url:\n        \"https://rickandmortyapi.com/api/character/[1,2,3,4,5,7,20,47,103,118,162,171,192,196,242,244,252,259,265,306,329,353,372,382]\",\n      method: \"GET\",\n      responseType: \"JSON\",\n    }).then((response) => {\n      response = response.data;\n\n      this.setState({\n        charactersInfo: response,\n      });\n    }).catch((error) => {\n      console.log(error);\n    });\n  }\n\n  handleClick = (event) => {\n    let targetID = event.target.id;\n    const collected = this.state.stickerClicked;\n\n    // stop double click of sticker error\n    for (let i = 0; i < collected.length; i++) {\n      if (targetID === collected[i].id) {\n        return;\n      }\n    }\n\n    // display sticker when clicked\n    const sticker = event.target.childNodes[0].classList;\n    const id = event.target.id;\n\n    sticker.remove(\"hidden\");\n    sticker.add(\"visible\");\n\n    // make copy of stickerClicked array\n    let copyOfStickerClicked = [...this.state.stickerClicked];\n\n    // push id of sticker to copyOfStickerClicked\n    copyOfStickerClicked.push({\n      id,\n    });\n\n    // assign copy to state\n    this.setState({\n      stickerClicked: copyOfStickerClicked,\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Header />\n        <main>\n          <div className=\"wrapper\">\n            <h2>Click a square to reveal the character!</h2>\n            <div className=\"pageContainer\">\n              {this.state.charactersInfo.map((character, index) => {\n                const key = character.id.toString();\n                return (\n                  <Sticker\n                    stickerNumber={index + 1}\n                    key={key}\n                    id={key}\n                    name={character.name}\n                    image={character.image}\n                    species={character.species}\n                    status={character.status}\n                    planet={character.origin.name}\n                    value={this.state.stickerClicked}\n                    handleClick={(event) => this.handleClick(event)}\n                  />\n                );\n              })}\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}